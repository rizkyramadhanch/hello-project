name: Release - Test, Build & Redeploy

on:
  push:
    branches:
      - 'sandbox'

jobs:
  test:
    name: Test - Unit & Integration
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
      - name: Maven Package
        run: mvn -B clean package -DskipTests
      - name: Maven Verify
        run: mvn -B clean verify

  docker:
    name: Publish - Docker Hub
    runs-on: ubuntu-18.04
    needs: [test]
    env:
      REPO: ${{ secrets.DOCKER_REPO }}
    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USER }} 
             -p ${{ secrets.DOCKER_PASS }}
      - name: Build Docker image
        run: docker build -t $REPO:latest -t $REPO:${GITHUB_SHA::8} .
      - name: Publish Docker image
        run: docker push $REPO

  deploy:
    runs-on: ubuntu-latest
    needs: [docker]
    env:
      CONTAINER_NAME: sandbox-alami
      INTERNAL_PORT: 8888
      PUBLISHED_PORT: 8888
      PUBLISHED_PORT_BAK: 8888
    steps:
      - name: running docker info
        uses: appleboy/ssh-action@master
        with:
          username: ${{ secrets.SSH_USERNAME }}
          host: ${{ secrets.SSH_IP_PUBLIC }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo ${CONTAINER_NAME}
            ./hello.sh
            sudo docker inspect --format='{{.Config.Image}}' ${CONTAINER_NAME} > /tmp/imagename
            cat /tmp/imagename
            sudo docker run --restart always --name ${CONTAINER_NAME}-0 -dit -p ${PUBLISHED_PORT_BAK}:${INTERNAL_PORT} $(cat /tmp/imagename)
            sleep 10
            sudo docker ps
            if [ $(curl --write-out '%{http_code}' --silent --output /dev/null localhost:${PUBLISHED_PORT_BAK}) -eq 200 ]; then docker rm -f ${CONTAINER_NAME}; else docker rm -f ${CONTAINER_NAME}-0; exit 1; fi
            sudo docker run --restart always --name ${CONTAINER_NAME} -dit -p ${PUBLISHED_PORT}:${INTERNAL_PORT} ${REPO}:${GH_SHA}
            sleep 10
            sudo docker ps
            if [ $(curl --write-out '%{http_code}' --silent --output /dev/null localhost:${PUBLISHED_PORT}) -eq 200 ]; then docker rm -f ${CONTAINER_NAME}-0; else docker rm -f docker rm ${CONTAINER_NAME} && docker run --restart always --name ${CONTAINER_NAME} -dit -p ${PUBLISHED_PORT}:${INTERNAL_PORT} $(cat /tmp/imagename) && docker rm ${CONTAINER_NAME}-0 -f; exit 1; fi